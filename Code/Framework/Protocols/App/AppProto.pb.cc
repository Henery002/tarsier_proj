// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: App/AppProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "App/AppProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BackdoorAuthReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackdoorAuthReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackdoorAuthRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackdoorAuthRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackdoorInputReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackdoorInputReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BackdoorInputRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BackdoorInputRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ERR_BACKDOOR_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CMD_BACKDOOR_TYPE_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* BackdoorService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_App_2fAppProto_2eproto() {
  protobuf_AddDesc_App_2fAppProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "App/AppProto.proto");
  GOOGLE_CHECK(file != NULL);
  BackdoorAuthReq_descriptor_ = file->message_type(0);
  static const int BackdoorAuthReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorAuthReq, pwd_),
  };
  BackdoorAuthReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackdoorAuthReq_descriptor_,
      BackdoorAuthReq::default_instance_,
      BackdoorAuthReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorAuthReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorAuthReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackdoorAuthReq));
  BackdoorAuthRsp_descriptor_ = file->message_type(1);
  static const int BackdoorAuthRsp_offsets_[1] = {
  };
  BackdoorAuthRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackdoorAuthRsp_descriptor_,
      BackdoorAuthRsp::default_instance_,
      BackdoorAuthRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorAuthRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorAuthRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackdoorAuthRsp));
  BackdoorInputReq_descriptor_ = file->message_type(2);
  static const int BackdoorInputReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorInputReq, input_),
  };
  BackdoorInputReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackdoorInputReq_descriptor_,
      BackdoorInputReq::default_instance_,
      BackdoorInputReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorInputReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorInputReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackdoorInputReq));
  BackdoorInputRsp_descriptor_ = file->message_type(3);
  static const int BackdoorInputRsp_offsets_[1] = {
  };
  BackdoorInputRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BackdoorInputRsp_descriptor_,
      BackdoorInputRsp::default_instance_,
      BackdoorInputRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorInputRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackdoorInputRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BackdoorInputRsp));
  ERR_BACKDOOR_TYPE_descriptor_ = file->enum_type(0);
  CMD_BACKDOOR_TYPE_descriptor_ = file->enum_type(1);
  BackdoorService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_App_2fAppProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackdoorAuthReq_descriptor_, &BackdoorAuthReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackdoorAuthRsp_descriptor_, &BackdoorAuthRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackdoorInputReq_descriptor_, &BackdoorInputReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BackdoorInputRsp_descriptor_, &BackdoorInputRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_App_2fAppProto_2eproto() {
  delete BackdoorAuthReq::default_instance_;
  delete BackdoorAuthReq_reflection_;
  delete BackdoorAuthRsp::default_instance_;
  delete BackdoorAuthRsp_reflection_;
  delete BackdoorInputReq::default_instance_;
  delete BackdoorInputReq_reflection_;
  delete BackdoorInputRsp::default_instance_;
  delete BackdoorInputRsp_reflection_;
}

void protobuf_AddDesc_App_2fAppProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Net_2fNetProto_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022App/AppProto.proto\032\022Net/NetProto.proto"
    "\"\036\n\017BackdoorAuthReq\022\013\n\003pwd\030\001 \001(\t\"\021\n\017Back"
    "doorAuthRsp\"!\n\020BackdoorInputReq\022\r\n\005input"
    "\030\001 \001(\t\"\022\n\020BackdoorInputRsp*R\n\021ERR_BACKDO"
    "OR_TYPE\022\036\n\032ERR_BACKDOOR_INCORRECT_PWD\020\001\022"
    "\035\n\031ERR_BACKDOOR_UNAUTHORIZED\020\002*\205\001\n\021CMD_B"
    "ACKDOOR_TYPE\022\032\n\025CMD_BACKDOOR_AUTH_REQ\020\351\007"
    "\022\032\n\025CMD_BACKDOOR_AUTH_RSP\020\352\007\022\033\n\026CMD_BACK"
    "DOOR_INPUT_REQ\020\353\007\022\033\n\026CMD_BACKDOOR_INPUT_"
    "RSP\020\354\0072x\n\017BackdoorService\0220\n\004Auth\022\020.Back"
    "doorAuthReq\032\020.BackdoorAuthRsp\"\004\200}\351\007\0223\n\005I"
    "nput\022\021.BackdoorInputReq\032\021.BackdoorInputR"
    "sp\"\004\200}\353\007B\003\200\001\001", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "App/AppProto.proto", &protobuf_RegisterTypes);
  BackdoorAuthReq::default_instance_ = new BackdoorAuthReq();
  BackdoorAuthRsp::default_instance_ = new BackdoorAuthRsp();
  BackdoorInputReq::default_instance_ = new BackdoorInputReq();
  BackdoorInputRsp::default_instance_ = new BackdoorInputRsp();
  BackdoorAuthReq::default_instance_->InitAsDefaultInstance();
  BackdoorAuthRsp::default_instance_->InitAsDefaultInstance();
  BackdoorInputReq::default_instance_->InitAsDefaultInstance();
  BackdoorInputRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_App_2fAppProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_App_2fAppProto_2eproto {
  StaticDescriptorInitializer_App_2fAppProto_2eproto() {
    protobuf_AddDesc_App_2fAppProto_2eproto();
  }
} static_descriptor_initializer_App_2fAppProto_2eproto_;
const ::google::protobuf::EnumDescriptor* ERR_BACKDOOR_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERR_BACKDOOR_TYPE_descriptor_;
}
bool ERR_BACKDOOR_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CMD_BACKDOOR_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMD_BACKDOOR_TYPE_descriptor_;
}
bool CMD_BACKDOOR_TYPE_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BackdoorAuthReq::kPwdFieldNumber;
#endif  // !_MSC_VER

BackdoorAuthReq::BackdoorAuthReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackdoorAuthReq)
}

void BackdoorAuthReq::InitAsDefaultInstance() {
}

BackdoorAuthReq::BackdoorAuthReq(const BackdoorAuthReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackdoorAuthReq)
}

void BackdoorAuthReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackdoorAuthReq::~BackdoorAuthReq() {
  // @@protoc_insertion_point(destructor:BackdoorAuthReq)
  SharedDtor();
}

void BackdoorAuthReq::SharedDtor() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void BackdoorAuthReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackdoorAuthReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorAuthReq_descriptor_;
}

const BackdoorAuthReq& BackdoorAuthReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_App_2fAppProto_2eproto();
  return *default_instance_;
}

BackdoorAuthReq* BackdoorAuthReq::default_instance_ = NULL;

BackdoorAuthReq* BackdoorAuthReq::New() const {
  return new BackdoorAuthReq;
}

void BackdoorAuthReq::Clear() {
  if (has_pwd()) {
    if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      pwd_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackdoorAuthReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackdoorAuthReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pwd = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackdoorAuthReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackdoorAuthReq)
  return false;
#undef DO_
}

void BackdoorAuthReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackdoorAuthReq)
  // optional string pwd = 1;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackdoorAuthReq)
}

::google::protobuf::uint8* BackdoorAuthReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackdoorAuthReq)
  // optional string pwd = 1;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackdoorAuthReq)
  return target;
}

int BackdoorAuthReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pwd = 1;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackdoorAuthReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackdoorAuthReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackdoorAuthReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackdoorAuthReq::MergeFrom(const BackdoorAuthReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackdoorAuthReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackdoorAuthReq::CopyFrom(const BackdoorAuthReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackdoorAuthReq::IsInitialized() const {

  return true;
}

void BackdoorAuthReq::Swap(BackdoorAuthReq* other) {
  if (other != this) {
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackdoorAuthReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackdoorAuthReq_descriptor_;
  metadata.reflection = BackdoorAuthReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BackdoorAuthRsp::BackdoorAuthRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackdoorAuthRsp)
}

void BackdoorAuthRsp::InitAsDefaultInstance() {
}

BackdoorAuthRsp::BackdoorAuthRsp(const BackdoorAuthRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackdoorAuthRsp)
}

void BackdoorAuthRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackdoorAuthRsp::~BackdoorAuthRsp() {
  // @@protoc_insertion_point(destructor:BackdoorAuthRsp)
  SharedDtor();
}

void BackdoorAuthRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackdoorAuthRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackdoorAuthRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorAuthRsp_descriptor_;
}

const BackdoorAuthRsp& BackdoorAuthRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_App_2fAppProto_2eproto();
  return *default_instance_;
}

BackdoorAuthRsp* BackdoorAuthRsp::default_instance_ = NULL;

BackdoorAuthRsp* BackdoorAuthRsp::New() const {
  return new BackdoorAuthRsp;
}

void BackdoorAuthRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackdoorAuthRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackdoorAuthRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:BackdoorAuthRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackdoorAuthRsp)
  return false;
#undef DO_
}

void BackdoorAuthRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackdoorAuthRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackdoorAuthRsp)
}

::google::protobuf::uint8* BackdoorAuthRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackdoorAuthRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackdoorAuthRsp)
  return target;
}

int BackdoorAuthRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackdoorAuthRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackdoorAuthRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackdoorAuthRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackdoorAuthRsp::MergeFrom(const BackdoorAuthRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackdoorAuthRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackdoorAuthRsp::CopyFrom(const BackdoorAuthRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackdoorAuthRsp::IsInitialized() const {

  return true;
}

void BackdoorAuthRsp::Swap(BackdoorAuthRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackdoorAuthRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackdoorAuthRsp_descriptor_;
  metadata.reflection = BackdoorAuthRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BackdoorInputReq::kInputFieldNumber;
#endif  // !_MSC_VER

BackdoorInputReq::BackdoorInputReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackdoorInputReq)
}

void BackdoorInputReq::InitAsDefaultInstance() {
}

BackdoorInputReq::BackdoorInputReq(const BackdoorInputReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackdoorInputReq)
}

void BackdoorInputReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackdoorInputReq::~BackdoorInputReq() {
  // @@protoc_insertion_point(destructor:BackdoorInputReq)
  SharedDtor();
}

void BackdoorInputReq::SharedDtor() {
  if (input_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_;
  }
  if (this != default_instance_) {
  }
}

void BackdoorInputReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackdoorInputReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorInputReq_descriptor_;
}

const BackdoorInputReq& BackdoorInputReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_App_2fAppProto_2eproto();
  return *default_instance_;
}

BackdoorInputReq* BackdoorInputReq::default_instance_ = NULL;

BackdoorInputReq* BackdoorInputReq::New() const {
  return new BackdoorInputReq;
}

void BackdoorInputReq::Clear() {
  if (has_input()) {
    if (input_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      input_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackdoorInputReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackdoorInputReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input().data(), this->input().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BackdoorInputReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackdoorInputReq)
  return false;
#undef DO_
}

void BackdoorInputReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackdoorInputReq)
  // optional string input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackdoorInputReq)
}

::google::protobuf::uint8* BackdoorInputReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackdoorInputReq)
  // optional string input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input().data(), this->input().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackdoorInputReq)
  return target;
}

int BackdoorInputReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackdoorInputReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackdoorInputReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackdoorInputReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackdoorInputReq::MergeFrom(const BackdoorInputReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      set_input(from.input());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackdoorInputReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackdoorInputReq::CopyFrom(const BackdoorInputReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackdoorInputReq::IsInitialized() const {

  return true;
}

void BackdoorInputReq::Swap(BackdoorInputReq* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackdoorInputReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackdoorInputReq_descriptor_;
  metadata.reflection = BackdoorInputReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BackdoorInputRsp::BackdoorInputRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BackdoorInputRsp)
}

void BackdoorInputRsp::InitAsDefaultInstance() {
}

BackdoorInputRsp::BackdoorInputRsp(const BackdoorInputRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BackdoorInputRsp)
}

void BackdoorInputRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BackdoorInputRsp::~BackdoorInputRsp() {
  // @@protoc_insertion_point(destructor:BackdoorInputRsp)
  SharedDtor();
}

void BackdoorInputRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BackdoorInputRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackdoorInputRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorInputRsp_descriptor_;
}

const BackdoorInputRsp& BackdoorInputRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_App_2fAppProto_2eproto();
  return *default_instance_;
}

BackdoorInputRsp* BackdoorInputRsp::default_instance_ = NULL;

BackdoorInputRsp* BackdoorInputRsp::New() const {
  return new BackdoorInputRsp;
}

void BackdoorInputRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BackdoorInputRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BackdoorInputRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:BackdoorInputRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BackdoorInputRsp)
  return false;
#undef DO_
}

void BackdoorInputRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BackdoorInputRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BackdoorInputRsp)
}

::google::protobuf::uint8* BackdoorInputRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BackdoorInputRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BackdoorInputRsp)
  return target;
}

int BackdoorInputRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackdoorInputRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BackdoorInputRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BackdoorInputRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BackdoorInputRsp::MergeFrom(const BackdoorInputRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BackdoorInputRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackdoorInputRsp::CopyFrom(const BackdoorInputRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackdoorInputRsp::IsInitialized() const {

  return true;
}

void BackdoorInputRsp::Swap(BackdoorInputRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BackdoorInputRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BackdoorInputRsp_descriptor_;
  metadata.reflection = BackdoorInputRsp_reflection_;
  return metadata;
}


// ===================================================================

BackdoorService::~BackdoorService() {}

const ::google::protobuf::ServiceDescriptor* BackdoorService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* BackdoorService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return BackdoorService_descriptor_;
}

void BackdoorService::Auth(::google::protobuf::RpcController* controller,
                         const ::BackdoorAuthReq*,
                         ::BackdoorAuthRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Auth() not implemented.");
  done->Run();
}

void BackdoorService::Input(::google::protobuf::RpcController* controller,
                         const ::BackdoorInputReq*,
                         ::BackdoorInputRsp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Input() not implemented.");
  done->Run();
}

void BackdoorService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), BackdoorService_descriptor_);
  switch(method->index()) {
    case 0:
      Auth(controller,
             ::google::protobuf::down_cast<const ::BackdoorAuthReq*>(request),
             ::google::protobuf::down_cast< ::BackdoorAuthRsp*>(response),
             done);
      break;
    case 1:
      Input(controller,
             ::google::protobuf::down_cast<const ::BackdoorInputReq*>(request),
             ::google::protobuf::down_cast< ::BackdoorInputRsp*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BackdoorService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::BackdoorAuthReq::default_instance();
    case 1:
      return ::BackdoorInputReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& BackdoorService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::BackdoorAuthRsp::default_instance();
    case 1:
      return ::BackdoorInputRsp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

BackdoorService_Stub::BackdoorService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BackdoorService_Stub::BackdoorService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BackdoorService_Stub::~BackdoorService_Stub() {
  if (owns_channel_) delete channel_;
}

void BackdoorService_Stub::Auth(::google::protobuf::RpcController* controller,
                              const ::BackdoorAuthReq* request,
                              ::BackdoorAuthRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BackdoorService_Stub::Input(::google::protobuf::RpcController* controller,
                              const ::BackdoorInputReq* request,
                              ::BackdoorInputRsp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
