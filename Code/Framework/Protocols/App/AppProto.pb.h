// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: App/AppProto.proto

#ifndef PROTOBUF_App_2fAppProto_2eproto__INCLUDED
#define PROTOBUF_App_2fAppProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "Net/NetProto.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_App_2fAppProto_2eproto();
void protobuf_AssignDesc_App_2fAppProto_2eproto();
void protobuf_ShutdownFile_App_2fAppProto_2eproto();

class BackdoorAuthReq;
class BackdoorAuthRsp;
class BackdoorInputReq;
class BackdoorInputRsp;

enum ERR_BACKDOOR_TYPE {
  ERR_BACKDOOR_INCORRECT_PWD = 1,
  ERR_BACKDOOR_UNAUTHORIZED = 2
};
bool ERR_BACKDOOR_TYPE_IsValid(int value);
const ERR_BACKDOOR_TYPE ERR_BACKDOOR_TYPE_MIN = ERR_BACKDOOR_INCORRECT_PWD;
const ERR_BACKDOOR_TYPE ERR_BACKDOOR_TYPE_MAX = ERR_BACKDOOR_UNAUTHORIZED;
const int ERR_BACKDOOR_TYPE_ARRAYSIZE = ERR_BACKDOOR_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERR_BACKDOOR_TYPE_descriptor();
inline const ::std::string& ERR_BACKDOOR_TYPE_Name(ERR_BACKDOOR_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERR_BACKDOOR_TYPE_descriptor(), value);
}
inline bool ERR_BACKDOOR_TYPE_Parse(
    const ::std::string& name, ERR_BACKDOOR_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERR_BACKDOOR_TYPE>(
    ERR_BACKDOOR_TYPE_descriptor(), name, value);
}
enum CMD_BACKDOOR_TYPE {
  CMD_BACKDOOR_AUTH_REQ = 1001,
  CMD_BACKDOOR_AUTH_RSP = 1002,
  CMD_BACKDOOR_INPUT_REQ = 1003,
  CMD_BACKDOOR_INPUT_RSP = 1004
};
bool CMD_BACKDOOR_TYPE_IsValid(int value);
const CMD_BACKDOOR_TYPE CMD_BACKDOOR_TYPE_MIN = CMD_BACKDOOR_AUTH_REQ;
const CMD_BACKDOOR_TYPE CMD_BACKDOOR_TYPE_MAX = CMD_BACKDOOR_INPUT_RSP;
const int CMD_BACKDOOR_TYPE_ARRAYSIZE = CMD_BACKDOOR_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMD_BACKDOOR_TYPE_descriptor();
inline const ::std::string& CMD_BACKDOOR_TYPE_Name(CMD_BACKDOOR_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMD_BACKDOOR_TYPE_descriptor(), value);
}
inline bool CMD_BACKDOOR_TYPE_Parse(
    const ::std::string& name, CMD_BACKDOOR_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMD_BACKDOOR_TYPE>(
    CMD_BACKDOOR_TYPE_descriptor(), name, value);
}
// ===================================================================

class BackdoorAuthReq : public ::google::protobuf::Message {
 public:
  BackdoorAuthReq();
  virtual ~BackdoorAuthReq();

  BackdoorAuthReq(const BackdoorAuthReq& from);

  inline BackdoorAuthReq& operator=(const BackdoorAuthReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackdoorAuthReq& default_instance();

  void Swap(BackdoorAuthReq* other);

  // implements Message ----------------------------------------------

  BackdoorAuthReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackdoorAuthReq& from);
  void MergeFrom(const BackdoorAuthReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pwd = 1;
  inline bool has_pwd() const;
  inline void clear_pwd();
  static const int kPwdFieldNumber = 1;
  inline const ::std::string& pwd() const;
  inline void set_pwd(const ::std::string& value);
  inline void set_pwd(const char* value);
  inline void set_pwd(const char* value, size_t size);
  inline ::std::string* mutable_pwd();
  inline ::std::string* release_pwd();
  inline void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:BackdoorAuthReq)
 private:
  inline void set_has_pwd();
  inline void clear_has_pwd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* pwd_;
  friend void  protobuf_AddDesc_App_2fAppProto_2eproto();
  friend void protobuf_AssignDesc_App_2fAppProto_2eproto();
  friend void protobuf_ShutdownFile_App_2fAppProto_2eproto();

  void InitAsDefaultInstance();
  static BackdoorAuthReq* default_instance_;
};
// -------------------------------------------------------------------

class BackdoorAuthRsp : public ::google::protobuf::Message {
 public:
  BackdoorAuthRsp();
  virtual ~BackdoorAuthRsp();

  BackdoorAuthRsp(const BackdoorAuthRsp& from);

  inline BackdoorAuthRsp& operator=(const BackdoorAuthRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackdoorAuthRsp& default_instance();

  void Swap(BackdoorAuthRsp* other);

  // implements Message ----------------------------------------------

  BackdoorAuthRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackdoorAuthRsp& from);
  void MergeFrom(const BackdoorAuthRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BackdoorAuthRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_App_2fAppProto_2eproto();
  friend void protobuf_AssignDesc_App_2fAppProto_2eproto();
  friend void protobuf_ShutdownFile_App_2fAppProto_2eproto();

  void InitAsDefaultInstance();
  static BackdoorAuthRsp* default_instance_;
};
// -------------------------------------------------------------------

class BackdoorInputReq : public ::google::protobuf::Message {
 public:
  BackdoorInputReq();
  virtual ~BackdoorInputReq();

  BackdoorInputReq(const BackdoorInputReq& from);

  inline BackdoorInputReq& operator=(const BackdoorInputReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackdoorInputReq& default_instance();

  void Swap(BackdoorInputReq* other);

  // implements Message ----------------------------------------------

  BackdoorInputReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackdoorInputReq& from);
  void MergeFrom(const BackdoorInputReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string input = 1;
  inline bool has_input() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  inline const ::std::string& input() const;
  inline void set_input(const ::std::string& value);
  inline void set_input(const char* value);
  inline void set_input(const char* value, size_t size);
  inline ::std::string* mutable_input();
  inline ::std::string* release_input();
  inline void set_allocated_input(::std::string* input);

  // @@protoc_insertion_point(class_scope:BackdoorInputReq)
 private:
  inline void set_has_input();
  inline void clear_has_input();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* input_;
  friend void  protobuf_AddDesc_App_2fAppProto_2eproto();
  friend void protobuf_AssignDesc_App_2fAppProto_2eproto();
  friend void protobuf_ShutdownFile_App_2fAppProto_2eproto();

  void InitAsDefaultInstance();
  static BackdoorInputReq* default_instance_;
};
// -------------------------------------------------------------------

class BackdoorInputRsp : public ::google::protobuf::Message {
 public:
  BackdoorInputRsp();
  virtual ~BackdoorInputRsp();

  BackdoorInputRsp(const BackdoorInputRsp& from);

  inline BackdoorInputRsp& operator=(const BackdoorInputRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BackdoorInputRsp& default_instance();

  void Swap(BackdoorInputRsp* other);

  // implements Message ----------------------------------------------

  BackdoorInputRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BackdoorInputRsp& from);
  void MergeFrom(const BackdoorInputRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:BackdoorInputRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_App_2fAppProto_2eproto();
  friend void protobuf_AssignDesc_App_2fAppProto_2eproto();
  friend void protobuf_ShutdownFile_App_2fAppProto_2eproto();

  void InitAsDefaultInstance();
  static BackdoorInputRsp* default_instance_;
};
// ===================================================================

class BackdoorService_Stub;

class BackdoorService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BackdoorService() {};
 public:
  virtual ~BackdoorService();

  typedef BackdoorService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Auth(::google::protobuf::RpcController* controller,
                       const ::BackdoorAuthReq* request,
                       ::BackdoorAuthRsp* response,
                       ::google::protobuf::Closure* done);
  virtual void Input(::google::protobuf::RpcController* controller,
                       const ::BackdoorInputReq* request,
                       ::BackdoorInputRsp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BackdoorService);
};

class BackdoorService_Stub : public BackdoorService {
 public:
  BackdoorService_Stub(::google::protobuf::RpcChannel* channel);
  BackdoorService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~BackdoorService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements BackdoorService ------------------------------------------

  void Auth(::google::protobuf::RpcController* controller,
                       const ::BackdoorAuthReq* request,
                       ::BackdoorAuthRsp* response,
                       ::google::protobuf::Closure* done);
  void Input(::google::protobuf::RpcController* controller,
                       const ::BackdoorInputReq* request,
                       ::BackdoorInputRsp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BackdoorService_Stub);
};


// ===================================================================


// ===================================================================

// BackdoorAuthReq

// optional string pwd = 1;
inline bool BackdoorAuthReq::has_pwd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackdoorAuthReq::set_has_pwd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackdoorAuthReq::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackdoorAuthReq::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& BackdoorAuthReq::pwd() const {
  // @@protoc_insertion_point(field_get:BackdoorAuthReq.pwd)
  return *pwd_;
}
inline void BackdoorAuthReq::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set:BackdoorAuthReq.pwd)
}
inline void BackdoorAuthReq::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
  // @@protoc_insertion_point(field_set_char:BackdoorAuthReq.pwd)
}
inline void BackdoorAuthReq::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BackdoorAuthReq.pwd)
}
inline ::std::string* BackdoorAuthReq::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    pwd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BackdoorAuthReq.pwd)
  return pwd_;
}
inline ::std::string* BackdoorAuthReq::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackdoorAuthReq::set_allocated_pwd(::std::string* pwd) {
  if (pwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pwd_;
  }
  if (pwd) {
    set_has_pwd();
    pwd_ = pwd;
  } else {
    clear_has_pwd();
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BackdoorAuthReq.pwd)
}

// -------------------------------------------------------------------

// BackdoorAuthRsp

// -------------------------------------------------------------------

// BackdoorInputReq

// optional string input = 1;
inline bool BackdoorInputReq::has_input() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BackdoorInputReq::set_has_input() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BackdoorInputReq::clear_has_input() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BackdoorInputReq::clear_input() {
  if (input_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_->clear();
  }
  clear_has_input();
}
inline const ::std::string& BackdoorInputReq::input() const {
  // @@protoc_insertion_point(field_get:BackdoorInputReq.input)
  return *input_;
}
inline void BackdoorInputReq::set_input(const ::std::string& value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_ = new ::std::string;
  }
  input_->assign(value);
  // @@protoc_insertion_point(field_set:BackdoorInputReq.input)
}
inline void BackdoorInputReq::set_input(const char* value) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_ = new ::std::string;
  }
  input_->assign(value);
  // @@protoc_insertion_point(field_set_char:BackdoorInputReq.input)
}
inline void BackdoorInputReq::set_input(const char* value, size_t size) {
  set_has_input();
  if (input_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_ = new ::std::string;
  }
  input_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BackdoorInputReq.input)
}
inline ::std::string* BackdoorInputReq::mutable_input() {
  set_has_input();
  if (input_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    input_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:BackdoorInputReq.input)
  return input_;
}
inline ::std::string* BackdoorInputReq::release_input() {
  clear_has_input();
  if (input_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = input_;
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BackdoorInputReq::set_allocated_input(::std::string* input) {
  if (input_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete input_;
  }
  if (input) {
    set_has_input();
    input_ = input;
  } else {
    clear_has_input();
    input_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:BackdoorInputReq.input)
}

// -------------------------------------------------------------------

// BackdoorInputRsp


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ERR_BACKDOOR_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ERR_BACKDOOR_TYPE>() {
  return ::ERR_BACKDOOR_TYPE_descriptor();
}
template <> struct is_proto_enum< ::CMD_BACKDOOR_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMD_BACKDOOR_TYPE>() {
  return ::CMD_BACKDOOR_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_App_2fAppProto_2eproto__INCLUDED
